Solti.Utils.Router.ExceptionHandler<TException>
Solti.Utils.Router.IConverter.Type.get -> System.Type!
Solti.Utils.Router.ParsedRoute
Solti.Utils.Router.ParsedRoute.Segments.get -> System.Collections.Generic.IReadOnlyList<Solti.Utils.Router.RouteSegment!>!
Solti.Utils.Router.ParsedRoute.Template.get -> string!
Solti.Utils.Router.ParsedRoute.Variables.get -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Type!>!
Solti.Utils.Router.RouterBuilder.RegisterExceptionHandler<TException>(Solti.Utils.Router.ExceptionHandler<TException!>! handler) -> void
Solti.Utils.Router.RouterBuilder.RegisterExceptionHandler<TException>(System.Linq.Expressions.Expression<Solti.Utils.Router.ExceptionHandler<TException!>!>! handlerExpr) -> void
Solti.Utils.Router.RouteSegment
Solti.Utils.Router.RouteSegment.Converter.get -> Solti.Utils.Router.IConverter?
Solti.Utils.Router.RouteSegment.Converter.init -> void
Solti.Utils.Router.RouteSegment.Name.get -> string!
Solti.Utils.Router.RouteSegment.Name.init -> void
Solti.Utils.Router.RouteSegment.RouteSegment(string! Name, Solti.Utils.Router.IConverter? Converter = null) -> void
static Solti.Utils.Router.RouteTemplate.Parse(string! template, System.Collections.Generic.IReadOnlyDictionary<string!, Solti.Utils.Router.ConverterFactory!>? converters = null, Solti.Utils.Router.SplitOptions? splitOptions = null) -> Solti.Utils.Router.ParsedRoute!